[["index.html", "Conheça o R: Introdução, dicas e curiosidades 1 Apresentação", " Conheça o R: Introdução, dicas e curiosidades Gabriel Danilo Shimizu 2021-03-11 1 Apresentação R é uma linguagem de programação muito utilizada na âmbito da estatística e na ciência de dados. Na Agronomia, o conhecimento sobre essa linguagem é um diferencial, sobretudo na carreira acadêmica, pois sua limitação gráfica e de análises é praticamente inexistente. Este curso, embora curto, representa um primeiro passo para os futuros usuários de R e, é essencial para a compreensão das diversas funcionalidades dessa linguagem de programação. Para acessar a sala de aula clique no ícone abaixo: Horário e data: 19:00h - 16/03/2021 Local: remoto via google meet Carga horária: de 3 a 4 horas Número de vagas: 50 Objetivo: proporcionar um conhecimento mínimo sobre a linguagem R. Público alvo: estudantes de pós-graduação em agronomia. Conteúdo: Introdução a linguagem R e ao ambiente Rstudio Dicas de importação de dados, geração de gráficos, atalhos, pacotes e informações no geral Curiosidades Investimento: gratuito, entretanto sem emissão de certificado. Ministrante: Gabriel Danilo Shimizu VAGAS LIMITADAS: Inscrições realizadas apenas com e-mail institucional UEL "],["o-que-é-o-r.html", " 2 O que é o R", " 2 O que é o R R é um ambiente computacional e uma linguagem de programação especializada em manipulação, análise e visualização gráfica de dados. Na atualidade é considerado o melhor ambiente computacional para essa finalidade. O ambiente está disponível para diferentes sistemas operacionais: Unix/Linux, Mac e Windows. Foi criado originalmente por Ross Ihaka e por Robert Gentleman no departamento de Estatística da Universidade de Auckland, Nova Zelândia. Posteriormente, foi desenvolvido pelo esforço colaborativo de pessoas em vários locais do mundo. O nome R provém em parte das iniciais dos criadores (Ross Ihaka e Robert Gentleman) e também de um jogo figurado com a linguagem S (da Bell Laboratories, antiga AT&amp;T). R é um ambiente e uma linguagem de programação similar ao S, contudo, é uma implementação distinta do S. Muitos códigos escritos para o S podem ser executados inalterados no R e vice-versa. R é altamente expansível com o uso dos pacotes. Os pacotes são bibliotecas com dados e funções para diferentes áreas do conhecimento relacionado a estatística e áreas afins. Um conjunto básico de pacotes vem embutido na instalação do R, com muito outros disponíveis na rede de distribuição do R (em inglês CRAN). A linguagem R é largamente usada entre estatísticos e analistas de dados para desenvolver software de estatística e análise de dados. Pesquisas e levantamentos com profissionais da área mostram que a popularidade do R aumentou substancialmente nos últimos anos. Porque utilizar o R? Software gratuito com código aberto com uma linguagem acessível; Expansão exponencial entre pesquisadores, engenheiros e estatísticos; Se reinventa constantemente através de novas aplicações (aproximadamente 14.762 pacotes); Cobertura inigualável, tecnologia de ponta; Totalmente flexível, permitindo desenvolver facilmente funções e pacotes para facilitar o trabalho; Capacidade gráfica; Disponível para diferentes plataformas: Windows, Linux e Mac. Total de package no CRAN: 17275 Atualizado em: 09/03/2021 (CRAN) "],["instalação-do-software-r.html", " 3 Instalação do software R", " 3 Instalação do software R link para download: Software R R Studio Acessar: https://www.r-project.org/ Ir em: Download &gt; CRAN Ir em: Universidade Federal do Paraná Ir em: Escolher a opção do sistema operacional do computador Ir em: Instalar R pela primeira vez Versões anteriores do R Executar o instalador Instalando RStudio Acessar: https://www.rstudio.com/ Ir em: Download Baixar a versão do Rstudio correspondente ao seu sistema operacional Executar o instalador. "],["primeiros-passos.html", " 4 Primeiros passos", " 4 Primeiros passos Abra o Rstudio Ambiente Rstudio Source: é seu script (Sempre construir o script aqui, nunca no console) Console: é a saída Dados e histórico: é onde está os dados e tudo que foi realizado durante a análise Plots, files, packages, ajuda: é a saída gráfica, as pastas do diretório atual, os pacotes instalados e a ajuda "],["noções-básicas.html", " 5 Noções básicas 5.1 Objetos 5.2 Manipulação de objeto", " 5 Noções básicas 5.1 Objetos 5.1.1 Vetores Unidade básica do R a=c(1,2,3,4) a ## [1] 1 2 3 4 #ou b=c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) b ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; is.vector(a) ## [1] TRUE class(a) ## [1] &quot;numeric&quot; str(a) ## num [1:4] 1 2 3 4 5.1.2 Fatores d=factor(c(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;)) d ## [1] a a a b b b c c c ## Levels: a b c str(d) ## Factor w/ 3 levels &quot;a&quot;,&quot;b&quot;,&quot;c&quot;: 1 1 1 2 2 2 3 3 3 table(d) ## d ## a b c ## 3 3 3 5.1.3 Matrizes matrix(rep(1,12),ncol=4) ## [,1] [,2] [,3] [,4] ## [1,] 1 1 1 1 ## [2,] 1 1 1 1 ## [3,] 1 1 1 1 5.1.4 data.frame data.frame(f1=1:10, f2=11:20) ## f1 f2 ## 1 1 11 ## 2 2 12 ## 3 3 13 ## 4 4 14 ## 5 5 15 ## 6 6 16 ## 7 7 17 ## 8 8 18 ## 9 9 19 ## 10 10 20 5.1.5 Lista lista=list(f1=1:10, f2=11:20) lista$f1 ## [1] 1 2 3 4 5 6 7 8 9 10 lista$f2 ## [1] 11 12 13 14 15 16 17 18 19 20 5.2 Manipulação de objeto b[1] ## [1] &quot;a&quot; resposta=c(3.1,3.2,3.4,3.8,4,5.0,5.1,5.6,6.2,7,10,10.2,10.7,11,12,6,6.5,6.2,7,6.9,20,5.2,5.6,5.8,6) Trat=rep(c(paste(&quot;T&quot;,1:5)),e=5) car::Boxplot(resposta~Trat) ## Warning in Boxplot.default(mf[[response]], x, id = list(method = id.method, : ## NAs introduzidos por coerção ## [1] &quot;21&quot; car::Boxplot(resposta[-21]~Trat[-21]) ## Warning in Boxplot.default(mf[[response]], x, id = list(method = id.method, : ## NAs introduzidos por coerção dados=data.frame(Trat,resposta) with(dados[-21,],boxplot(resposta~Trat)) Removendo tratamento dados=data.frame(Trat,resposta) with(dados[!Trat==&quot;T 5&quot;,],boxplot(resposta~Trat)) Criar um sequência repetida de observações O primeiro argumento indica o valor que será repetido e o segundo argumento será o número de vezes que será repetido rep(0,10) # criando uma sequência de 10 observações 0 ## [1] 0 0 0 0 0 0 0 0 0 0 rep(&quot;T&quot;,10) # criando uma sequência de 10 observações T ## [1] &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; Criando uma sequência de cinco observações 1 e 2, sendo cada uma repetida de forma alternada rep(c(1,2),5) ## [1] 1 2 1 2 1 2 1 2 1 2 Criando uma sequência de cinco observações 1 e 2, sendo cada uma repetida de forma sequencial (5 primeiras observações são 1 e as demais 2). rep(c(1,2),e=5) ## [1] 1 1 1 1 1 2 2 2 2 2 Como criar um sequência númerica com intervalo fixo? seq(1,100,1) # sequencia de 1 a 100 com intervalo de 1 em 1 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 "],["instalando-packages.html", " 6 Instalando packages", " 6 Instalando packages Digitar o nome do pacote desejado e depois em Install. Toda vez que aparecer o ícone em vermelho, o Rstudio está trabalhando, dessa forma, não executar mais nada até o ícone desaparecer. Chamando pacote no Rstudio Função: library(nome do pacote) require(nome do pacote) nome do pacote:: Ex. library(readxl); require(readxl); readxl:: "],["tabulação-de-dados.html", " 7 Tabulação de dados", " 7 Tabulação de dados Apesar da simplicidade em se tabular dados em uma planilha excel, a grande maioria dos acadêmicos tem dificuldade em se efetuar tal tarefa. Isso torna-se ainda pior, quando os mesmos precisam tabular de uma forma específica para um determinado Software. Assim, as etapas a seguir possuem a finalidade de auxiliar os usuários de R a estruturar a planilha em excel de tal forma a facilitar as análises. O que não colocar em sua planilha! Frequentemente é comum que os usuários de excel realizem cálculos de medidas de posição e dispersão, tais como média, variância, desvio-padrão, etc Entretanto, essas células preenchidas por tais estatísticas de nada contribuem para quem irá trabalhar com o R, muito pelo contrário, acabam gerando mais trabalho, visto que em alguns casos podem ocasionar confundimento no Software; Deve-se evitar nomes de colunas muito extensos, pois operacionalmente digitar tais nomes pode gerar complicações futuras; Nome de colunas sempre na primeira linha; Evitar nome dos níveis do fator (Tratamentos) como numérico (1,2,3,4,), exceto quando os tratamentos são quantitativos; Evitar pular células (Células em branco), a menos que tenha dados faltantes (parcelas perdidas). Monte a planilha da forma mais simples possível!!! Experimentos em delineamento inteiramente casualizado só possuem o tratamento como fator. Dessa forma, em uma planilha, só necessitamos de uma coluna de tratamentos e uma coluna de resposta. Quando há mais de uma variável resposta, pode-se adicionar as variáveis em cada coluna, lado a lado. Abaixo, segue um imagem de como montar um arquivo em excel de um experimento em DIC com seis tratamentos e quatro repetições e o link para o download de um arquivo em excel (extensão .xlsx) "],["importação-de-dados.html", " 8 Importação de dados 8.1 Excel 8.2 csv", " 8 Importação de dados 8.1 Excel 8.1.1 Utilizando a package readxl Existem diversas formas de importação arquivos para o R. Uma das mais utilizadas é a importação de um arquivo em excel. O excel pode possuir dois tipos de extensão, .xls ou .xlsx, sendo as versões anteriores e superiores ao office 2010, respectivamente. Uma das packages mais utilizadas para importação os dados de um arquivo em excel é chamado de readxl. Para importar por esse pacote, devemos seguir os passos a seguir: 8.1.2 Especificar o diretório onde fica o arquivo em excel. Uma das formas de especificar o diretório buscando a pasta manualmente, como na Figura 1 (copiar e colar no Source do Rstudio). Figura 1: Especificando diretório de trabalho A seguir, é necessário trocar as barras de para / ou adicionar mais uma \\ (\\ para \\) e colocar dentro do comando setwd e o diretório entre aspas. Obs. O diretório abaixo é do meu computador!!! setwd(&quot;C:\\\\Users\\\\Gabriel Shimizu\\\\Dropbox\\\\ProjetoExperimental\\\\Análise Descritiva&quot;) ## ou setwd(&quot;C:/Users/Gabriel Shimizu/Dropbox/ProjetoExperimental/Análise Descritiva&quot;) Obs. Sempre que for alterar a local da pasta, devemos alterar a localização do diretório!!! 8.1.3 Opção 2 para especificar diretório Atalho: ctrl+shift+h Este comando irá buscar as pastas (não irá aparecer nenhum arquivo a menos que seja uma pasta). Buscar a pasta que contém o arquivo (Deverá saber onde fica, pois por esse método, o arquivo em extensão excel não irá aparecer, uma vez que o excel não é uma pasta) Após encontrar, clicar em open. No console do R irá aparecer setwd(localização), esta é a localização. Recomendo copiar e colar no Source do Rstudio 8.1.4 Conferir se o arquivo está no diretório especificado dir() 8.1.5 Ativando a package e importando o arquivo Antes de ativar o pacote, deve-se instalar o mesmo (Ver guia de instalação - Instalação) library(readxl) dados=read_excel(&quot;DIC.xlsx&quot;, sheet=1) O argumento sheet=1, está se referindo a planilha 1 do arquivo em excel (podemos exportar de outras planilhas) Obs. No caso de extensão .xls, não esquecer de mudar!!! 8.1.6 Ajuda ?readxl Conjunto de dados 8.2 csv Existem diversas formas de exportar arquivos para o R. Uma das mais utilizadas é a importação de um arquivo em extensão .csv. Para importar dados de um arquivo em .csv, podemos usar os comandos read.csv (arquivo separado por vírgula e decimal por ponto) ou read.csv2 (Arquivo separado por ponto e vírgula e decimental por vírgula). Para importar dados em extensão .csv, devemos seguir os passos a seguir: 8.2.1 Especificar o diretório onde fica o arquivo de dados. Uma das formas de especificar o diretório buscando a pasta manualmente, como na Figura 1 (copiar e colar no Source do Rstudio). Figura 1: Especificando diretório de trabalho A seguir, é necessário trocar as barras de para / ou adicionar mais uma \\ (\\ para \\) e colocar dentro do comando setwd e o diretório entre aspas. Obs. O diretório abaixo é do meu computador!!! setwd(&quot;C:\\\\Users\\\\Gabriel Shimizu\\\\Dropbox\\\\SITE\\\\EXPERIMENTAL&quot;) ## ou setwd(&quot;C:/Users/Gabriel Shimizu/Dropbox/SITE/EXPERIMENTAL&quot;) Obs. Sempre que for alterar a local da pasta, devemos alterar a localização do diretório!!! 8.2.2 Opção 2 para especificar diretório Atalho: ctrl+shift+h Este comando irá buscar as pastas (não irá aparecer nenhum arquivo a menos que seja uma pasta). Buscar a pasta que contém o arquivo (Deverá saber onde fica, pois por esse método, o arquivo em extensão excel não irá aparecer, uma vez que o excel não é uma pasta) Após encontrar, clicar em open. No console do R irá aparecer setwd(localização), esta é a localização. Recomendo copiar e colar no Source do Rstudio 8.2.3 Conferir se o arquivo está no diretório especificado dir() 8.2.4 Importando o arquivo 8.2.5 Arquivo separado por ponto e vírgula e decimal separado por vírgula dados=read.csv2(&quot;DIC (CSV ponto e virgula).csv&quot;) dados 8.2.6 Arquivo separado por vírgula e decimal com ponto dados=read.csv(&quot;DIC (CSV virgula).csv&quot;, sep=&quot;,&quot;) dados Dados (Separado por vírgula) Dados (Separado por ponto e vírgula) "],["atalhos.html", " 9 Atalhos", " 9 Atalhos Existem vários atalhos no Rstudio que facilitam a vida do usuário. Nos capítulos anteriores, vimos que o atalho ctrl+shift+h facilita a especificação do diretório de trabalho. Outros atalhos úteis, tais como o ctrl+shift+k para geração de relatórios via Rmarkdown, ou ctrl+shift+c para adicionar # sobre as linhas são bastante populares entre os usuários. A lista completa de atalhos do Rstudio podem ser acessadas utilizando o alt+shift+k. Particularmente eu utilizo comandos como os já mencionados, o ctrl+shift+n para abrir uma nova guia R; ctrl+A para selecionar tudo; ctrl+shift+home ou ctrl+shift+end para selecionar da linha até o começo ou da linha até o fim, respectivamente; ctrl+s para salvar; ctrl+x para recortar; ctrl+z, ctrl+c e ctrl+v para voltar alteração, copiar e colar, respectivamente. Outro atalho bastante usual e a utilização do tab após o cifrão ($) em data.frame e listas, conforme a seguir: Assim como mencionado, existe diversos atalhos disponíveis no Rstudio, alguns pouco funcionais. "],["fundamentos-gráficos.html", " 10 Fundamentos gráficos", " 10 Fundamentos gráficos O R possui diversas formas de elaborar diferentes tipos de gráficos. Todavia, podemos resumir em quatro grandes pacotes: graphics; lattice; ggplot2 e plotly. Os diversos outros pacotes existentes são variantes desses quatro principais. Aqui devo enfatizar que um curso de elaboração de gráficos é extremamente longo. Nesse sentido, a idéia e apenas mostras alguns conceitos fundamentais. graphics Os graficos do pacote graphics, que incluem comando como o plot, barplot, pie, etc trabalham com uma única função, definindo todos os parâmetros gráficos dentro da função. x=seq(1,10,by=1) y=seq(101,110,by=1) plot(y~x, xlab=&quot;Independente&quot;, ylab=&quot;Dependente&quot;, col=&quot;blue&quot;, pch=16) Parâmetros de margens, fonte, junção de gráficos do graphics são definidos anteriormente a plotagem. Aqui devo ressaltar que, quando alterado esses parâmetros, todos os gráficos posteriores utilizarão essa mesma alteração. par(family=&quot;serif&quot;) plot(y~x, xlab=&quot;Independente&quot;, ylab=&quot;Dependente&quot;, col=&quot;blue&quot;, pch=16) ggplot2 O ggplot2, diferente do graphics funciona por camadas. Nesse sentido, a ordem que é colocada interfere no resultado final. Vejamos o exemplo abaixo: x=seq(1,10,by=1) y=seq(101,110,by=1) dados=data.frame(x,y) library(ggplot2) ggplot(dados,aes(x=x,y=y))+ geom_point(col=&quot;red&quot;, size=4)+ geom_line()+ylab(&quot;Dependente&quot;)+ xlab(&quot;Independente&quot;) ggplot(dados,aes(x=x,y=y))+ geom_line()+ geom_point(col=&quot;red&quot;, size=4)+ ylab(&quot;Dependente&quot;)+ xlab(&quot;Independente&quot;) Reparem que nesse segundo caso, a linha ficou abaixo do ponto. No ggplot2 existem temas gráficos já implementados, o que pode facilitar o usuário, como a seguir: a=ggplot(dados,aes(x=x,y=y))+ geom_line()+ geom_point(col=&quot;red&quot;, size=4)+ ylab(&quot;Dependente&quot;)+ xlab(&quot;Independente&quot;)+theme_bw() b=ggplot(dados,aes(x=x,y=y))+ geom_line()+ geom_point(col=&quot;red&quot;, size=4)+ ylab(&quot;Dependente&quot;)+ xlab(&quot;Independente&quot;)+theme_classic() gridExtra::grid.arrange(a+labs(title=&quot;theme_bw()&quot;), b+labs(title=&quot;theme_classic()&quot;), ncol=2) "],["lista-de-pacotes-interessantes.html", " 11 Lista de pacotes interessantes", " 11 Lista de pacotes interessantes Estatística experimental: ExpDes ou ExpDes.pt easyanova agricolae art e ARTools lme4 e nlme multcomp Pacotes gráficos: ggplot2 e suas variantes lattice graphics plotly scatterplot3d Pacotes análise multivariada: vegan FactoMineR factoextra corrplot Hmisc Pacotes para área de melhoramento metan Pacotes para metanálise metafor meta Pacote para regressão não-linear drc segmented Pacote para análise de sobrevida survivalmineR survival Pacote para geração de relatórios, livros, websites rmarkdown bookdown blogdown shiny "]]
